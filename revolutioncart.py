# -*- coding: utf-8 -*-
"""RevolutionCart.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FIJ5ES-Fj2ktZoU4Jo4D0Ny8iSG22tFL
"""

# Import necessary libraries
import pandas as pd
import numpy as np

df = pd.read_csv('/content/Urvi Rai - revolutioncart_data - Urvi Rai - revolutioncart_data.csv')

# prompt: import pandas

import pandas as pd

# Fill missing values with the mean for numerical columns
df.fillna(df.mean(), inplace=True)

# Define features (X) and target (y)
X = df.drop(columns=['monthly_revenue'])  # Drop the target column
y = df['monthly_revenue']  # Target variable: monthly_revenue

# Perform feature scaling (normalize the data)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
# Split the data into train and test sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
# Initialize the Random Forest Regressor
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

# Train the model
rf_model.fit(X_train, y_train)

# Make predictions
y_pred_rf = rf_model.predict(X_test)
# Initialize the Ridge Regression model
ridge_model = Ridge(alpha=1.0)

# Train the model
ridge_model.fit(X_train, y_train)

# Make predictions
y_pred_ridge = ridge_model.predict(X_test)
# Initialize the Ridge Regression model
ridge_model = Ridge(alpha=1.0)

# Train the model
ridge_model.fit(X_train, y_train)

# Make predictions
y_pred_ridge = ridge_model.predict(X_test)
# For Random Forest Regressor
mse_rf = mean_squared_error(y_test, y_pred_rf)
r2_rf = r2_score(y_test, y_pred_rf)
print(f'Random Forest MSE: {mse_rf}, R² Score: {r2_rf}')

# For Ridge Regression
mse_ridge = mean_squared_error(y_test, y_pred_ridge)
r2_ridge = r2_score(y_test, y_pred_ridge)
print(f'Ridge Regression MSE: {mse_ridge}, R² Score: {r2_ridge}')
from sklearn.model_selection import GridSearchCV

# Define hyperparameters to tune
param_grid_rf = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10]
}

# Initialize GridSearchCV
grid_rf = GridSearchCV(estimator=rf_model, param_grid=param_grid_rf, cv=5)

# Fit the grid search to the data
grid_rf.fit(X_train, y_train)

# Print best parameters and score
print("Best Parameters for Random Forest:", grid_rf.best_params_)
param_grid_ridge = {'alpha': [0.1, 1.0, 10.0]}

grid_ridge = GridSearchCV(estimator=ridge_model, param_grid=param_grid_ridge, cv=5)
grid_ridge.fit(X_train, y_train)

print("Best Parameters for Ridge Regression:", grid_ridge.best_params_)
# Example of making predictions on new data
new_data = [[5, 1, 1200, 4.5, 15, 100000, 1000, 85, 3.5, 60, 50000, 15000, 2, 2.5, 2000, 105, 100,100]]
new_data_scaled = scaler.transform(new_data)  # Make sure to scale the new data

# Predict revenue using the trained Random Forest model
predicted_revenue = rf_model.predict(new_data_scaled)
print(f"Predicted Monthly Revenue: ${predicted_revenue[0]:.2f} million")
# Plot actual vs. predicted results
plt.figure(figsize=(10,6))
plt.scatter(y_test, y_pred_rf, color='blue', label='Random Forest Predictions')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('Actual Revenue')
plt.ylabel('Predicted Revenue')
plt.title('Actual vs Predicted Monthly Revenue (Random Forest)')
plt.legend()
plt.show()